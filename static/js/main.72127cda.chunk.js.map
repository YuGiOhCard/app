{"version":3,"sources":["App.js","index.js"],"names":["term","curLine","typingIndex","fitAddon","FitAddon","App","props","typing","message","length","write","charAt","setTimeout","prompt","char","state","isRunning","tringClaim","run","cmd","toLowerCase","help","window","open","startRun","setState","console","log","stopRun","getRun","startClaim","stopClaim","Date","now","valueOf","seconds","hours","Math","floor","minutes","toString","padStart","jumpClaim","ethereum","amount","getAmount","isNaN","Number","getPrice","a","params","to","data","price","request","method","then","result","catch","error","checkCanClaim","account","from","substr","value","canCalim","claim","c","yellow","red","chainId","accounts","amount2purchase","blue","balance","magenta","load","logs","Terminal","convertEol","fontFamily","fontSize","fontWeight","cursorBlink","setOption","background","foreground","loadAddon","document","getElementById","cyan","this","fit","onKey","key","domEvent","green","id","className","React","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.72127cda.chunk.js","sourcesContent":["import React from \"react\";\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport \"./xterm.css\";\nimport \"./App.css\";\nimport c from \"ansi-colors\";\n\nlet term;\nvar curLine = '';\nvar typingIndex = 0;\nconst fitAddon = new FitAddon();\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      logs: \"\",\n      isRunning: false,\n      tringClaim: false,\n    };\n  }\n\n  componentDidMount() {\n    term = new Terminal({\n      convertEol: true,\n      fontFamily: `'Fira Mono', monospace`,\n      fontSize: 22,\n      fontWeight: 900,\n      cursorBlink: true,\n      // rendererType: \"dom\" // default is canvas\n    });\n\n    //Styling\n    term.setOption(\"theme\", {\n      background: \"black\",\n      foreground: \"white\"\n    });\n\n    // Load Fit Addon\n    term.loadAddon(fitAddon);\n\n    // Open the terminal in #terminal-container\n    term.open(document.getElementById(\"xterm\"));\n\n    // Write text inside the terminal\n    term.write(c.magenta(\"YuGiOhCard\") + \" is a multichain card collection with a \" + c.blue(\"1+N\") + \" mechanism.\\n\")\n    term.write(\"YuGiOhCard NFT is the main form of YuGiOhCard, and its pictures and attributes are based on \" + c.cyan(\"Yu-Gi-Oh! TRADING CARD GAME\") + \".\\n\")\n    term.write(\"YuGiOhCard NFT is divided into \" + c.blue(\"main card\") + \" and \" + c.blue(\"subcard\") + \".\\n\")\n    // term.write(\"The main card, using the ERC721 standard, is issued on the Ethereum chain with a total of \" + c.blue(\"13,613\") + \" cards.\\n\")\n    // term.write(\"The subcard, using ERC1155 standard, is issued on the Ethereum Layer2 network or EVM-compatible chains, including but not limited to Ethereum, Polygon, Binance Smart Chain, Optimistic Ethereum and Arbitrum One.\\n\")\n    term.write(\"The subcard adopts the properties of the main card and ALL on-chain earnings of the subcard are attributed to the main card.\\n\")\n\n    this.help();\n    \n    // Make the terminal's size and geometry fit the size of #terminal-container\n    fitAddon.fit();\n\n    term.onKey(key => {\n      const char = key.domEvent.key;\n      if (char === \"Enter\") {\n        this.prompt(char);\n        curLine = '';\n      } else if (char === \"Backspace\") {\n        term.write(\"\\b \\b\");\n      } else {\n        curLine+=char;\n        term.write(c.green(char));\n      }\n    });\n\n    this.prompt();\n  }\n\n  typing = (message) => {\n    if (message.length > typingIndex) {\n      term.write(message.charAt(typingIndex));\n      typingIndex++;\n      setTimeout(this.typing(message), 10000);\n    } else {\n      typingIndex = 0;\n    }\n  };\n\n  prompt = (char) => {\n    var shellprompt = \"$ \";\n    if (this.state.isRunning || this.state.tringClaim) {\n      this.run();\n      return;\n    }\n    if (curLine !== '') {\n      var cmd = curLine.toLowerCase();\n      if (cmd === \"run\") {\n        this.run();\n        return;\n      }  else if (cmd === \"help\") {\n        this.help();\n        return;\n      }  else if (cmd === \"home\") {\n        window.open(\"https://ygocard.org\", \"_blank\")\n        term.write(\"\\r\\n\" + shellprompt);\n        return;\n      } else {\n        this.help();\n        term.write(\"\\r\\n\" + shellprompt);\n        return;\n      }\n    } else {\n      term.write(\"\\r\\n\" + shellprompt + curLine);\n    }\n  };\n\n  startRun = () => {\n    this.setState({isRunning: true});\n    console.log(this.state.isRunning);\n  }\n  stopRun = () => {\n    this.setState({isRunning: false});\n  }\n  getRun = () => {\n    return this.state.isRunning;\n  }\n\n  startClaim = () => {\n    this.setState({tringClaim: true});\n  }\n  stopClaim = () => {\n    this.setState({tringClaim: false});\n  }\n  tringClaim = () => {\n    return this.state.tringClaim;\n  }\n\n  help = () => {\n    term.write(\"\\r\\n\");\n    var message = \"YuGiOhCard is a multichain card collection with a 1+N mechanism.\\r\\n\\r\\n\" + \n        \"Available Commands:\\r\\n\" + \n        \"\\trun         Run to mint YuGiOhCard NFT\\r\\n\" +         \n        \"\\thelp        Show this usage message\\r\\n\" + \n        \"\\thome        Back to home\\r\\n\"\n\n    term.write(message);\n\n  }\n\n  run = () => {\n    term.write(\"\\r\\n\");\n    console.log(Date.now().valueOf())\n    var now = Date.now().valueOf();\n    if (now < 1640908800 * 1000) {\n      var seconds = 1640908800 - now / 1000;\n      var hours   = Math.floor(seconds / 3600);\n      var minutes = Math.floor((seconds - (hours * 3600)) / 60);\n      seconds = Math.floor(seconds - (hours * 3600) - (minutes * 60));\n      term.write(\"Purchase is not yet available. \" + hours.toString().padStart(2, '0') + \":\" + minutes.toString().padStart(2, '0') + \":\" + seconds.toString().padStart(2, '0') + \" left.\\r\\n$ \")\n      return\n    }\n\n    var message = '';\n    let typing = this.typing;\n    let startRun = this.startRun;\n    let stopRun = this.stopRun;\n    let isRunning = this.getRun;\n    let startClaim = this.startClaim;\n    let stopClaim = this.stopClaim;\n    let tringClaim = this.tringClaim;\n    let jumpClaim = false;\n\n    const { ethereum } = window;\n\n    var amount = 0;\n    if (isRunning()) {\n      if (curLine !== '' && !isNaN(curLine)) {\n        amount = Number(curLine);\n      }\n      if (amount < 1) {\n        amount = 1;\n      }\n    }\n    function getAmount() {\n      return amount;\n    }\n\n    if (tringClaim()) {\n      if (curLine === '' || curLine.toLowerCase().charAt(0) === 'y') {\n\n      } else {\n        stopClaim();\n        jumpClaim = true;\n      }\n    }\n   \n    let getPrice = async function() {\n      var params = [\n        {\n            to: '0x9645a7550d6CE93E43c4FF27526E05fcAb6aac4c', // YuGiOhCardPurchase\n            data: '0xa035b1fe',\n        }, \"pending\"\n      ];\n\n      var price = 0;\n      await ethereum\n        .request({\n            method: 'eth_call',\n            params,\n        })\n        .then((result) => {\n            // The result varies by RPC method.\n            // For example, this method will return a transaction hash hexadecimal string on success.\n            price = Number(result)\n        })\n        .catch((error) => {\n            // If the request fails, the Promise will reject with an error.\n            console.log(\"checkCanClaim error: \", error)\n            term.write(\"\\r\\n$ \");\n        });\n\n        return price;\n    }\n\n    let checkCanClaim = async function(account) {\n      var params = [\n        {\n            from: account,\n            to: '0x9645a7550d6CE93E43c4FF27526E05fcAb6aac4c', // YuGiOhCardPurchase\n            data: '0xbf3506c1000000000000000000000000' + account.substr(2),\n            value: '0x0',\n        }, \"pending\"\n      ];\n\n      var canCalim = false;\n      await ethereum\n        .request({\n            method: 'eth_call',\n            params,\n        })\n        .then((result) => {\n            // The result varies by RPC method.\n            // For example, this method will return a transaction hash hexadecimal string on success.\n            if (Number(result) === 1) {\n              canCalim = true;\n            }\n        })\n        .catch((error) => {\n            // If the request fails, the Promise will reject with an error.\n            console.log(\"checkCanClaim error: \", error)\n            term.write(\"\\r\\n$ \");\n        });\n\n        return canCalim;\n    }\n\n    let claim = async function(account) {\n      term.write(\"Tring to claim for free...\\r\\n\");\n      var params = [\n        {\n            from: account,\n            to: '0x9645a7550d6CE93E43c4FF27526E05fcAb6aac4c', // YuGiOhCardPurchase\n            data: '0x4e71d92d',\n        }\n      ];\n\n      await ethereum\n        .request({\n            method: 'eth_sendTransaction',\n            params,\n        })\n        .then((result) => {\n            // The result varies by RPC method.\n            // For example, this method will return a transaction hash hexadecimal string on success.\n            term.write(\"Your tx hash is \" + c.yellow(result));\n            term.write(\"\\r\\n$ \");\n        })\n        .catch((error) => {\n            // If the request fails, the Promise will reject with an error.\n            term.write(c.red(\"ERROR: \" + error.message))\n            term.write(\"\\r\\n$ \");\n        });\n\n        stopClaim();\n    }\n\n    async function load() {\n      if (typeof window.ethereum === 'undefined') {\n        return;\n      }\n  \n      console.log(\"window.ethereum.chainId: \", window.ethereum.chainId);\n      if (window.ethereum.chainId !== \"0x1\") {\n        try {\n            await ethereum.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: '0x1' }],\n            });\n        } catch (switchError) {\n            console.log(\"switchError: \", switchError)\n            // This error code indicates that the chain has not been added to MetaMask.\n            // handle other \"switch\" errors\n            return;\n        }\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      const account = accounts[0];\n      console.log(account);\n\n      // const price = 0.005 * 1e18;\n      var price = await getPrice();\n      console.log(\"Price: \", price)\n\n      if (isRunning()) {        \n        var amount2purchase = getAmount();\n        if (amount2purchase > 20) amount2purchase = 20;\n        term.write(\"Tring to purchase \" + c.yellow(amount2purchase) + \" card(s)...\\r\\n\");\n        \n        var data = \"0xa0712d68\" + Number(amount2purchase).toString(16).padStart(64, '0');    // mint(uint256)\n\n        var value = Number(amount2purchase) * price;\n\n        var params = [\n          {\n              from: account,\n              to: '0x9645a7550d6CE93E43c4FF27526E05fcAb6aac4c', // YuGiOhCardPurchase\n              data: data,\n              value: value.toString(16),\n          },\n        ];\n\n        await ethereum\n          .request({\n              method: 'eth_sendTransaction',\n              params,\n          })\n          .then((result) => {\n            // The result varies by RPC method.\n            // For example, this method will return a transaction hash hexadecimal string on success.\n            term.write(\"Your tx hash is \" + c.yellow(result));\n            term.write(\"\\r\\n$ \");\n          })\n          .catch((error) => {\n            // If the request fails, the Promise will reject with an error.\n            term.write(c.red(\"ERROR: \" + error.message))\n            term.write(\"\\r\\n$ \");\n          });\n      \n        \n        stopRun();\n        return;\n      }\n\n      if (tringClaim()) {\n        await claim(account);\n        return;\n      }\n\n      if (!jumpClaim) {\n        term.write(\"Your account is \" + c.yellow(account) + \"\\r\\n\");\n\n        term.write(\"Tring to check whether you are \" + c.blue(\"PEOPLE\") + \"...\\r\\n\");\n\n        var canCalim = await checkCanClaim(account);\n  \n        if (canCalim) {\n          message = \"You are \" + c.yellow(\"PEOPLE\") + \".\\r\\n\" + \n          \"To claim a card for free or no (Y/n): \";\n          typing(message);\n  \n          startClaim();\n  \n          return;\n        }\n\n        message = \"You are not PEOPLE or you've claimed, you need to pay for mint.\\r\\n\";\n        typing(message);\n      }\n      message = \"Tring to check your balance...\\r\\n\";\n      typing(message);\n     \n      const balance = await ethereum.request({ method: 'eth_getBalance', params:[account,'latest'] });\n      term.write(\"Your balance is: \" + c.yellow(Number(balance) / 1e18) + \" ETH\\r\\n\");\n\n      var amount = Math.floor(Number(balance) / (price * 1.2));\n      term.write(\"Minting a card costs \" + c.magenta((price/1e18)) + \" ETH.\\r\\n\");\n      if (amount < 1) {\n        term.write(c.red(\"You can't mint YGOCard.\\r\\n\"));\n        term.write(\"$ \");\n        return;\n      } else {\n        term.write(\"And you can mint \" + c.yellow(amount) + \" card(s).\\r\\n\");\n        term.write(\"How many cards do you want to purchase?\\r\\nAmount[1-20]: \")\n        startRun();\n      }\n\n    }\n\n    load();\n  }\n\n  render() {\n    return (\n        \n          <div id=\"xterm\" className=\"fill-window\" />\n       \n    );\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}